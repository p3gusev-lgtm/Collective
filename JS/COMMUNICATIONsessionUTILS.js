// ===== –°–ò–°–¢–ï–ú–ù–´–ï –£–¢–ò–õ–ò–¢–´ –û–ë–™–ï–ö–¢–ê 3826 =====

// –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
function safeAddMessage(text, sender = '–û–ü–ï–†–ê–¢–û–†', files = []) {
    try {
        if (!text && files.length === 0) {
            throw new Error("–°–û–û–ë–©–ï–ù–ò–ï –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ü–£–°–¢–´–ú");
        }
        
        if (text && text.length > 256) {
            throw new Error("–ü–†–ï–í–´–®–ï–ù –õ–ò–ú–ò–¢ –î–õ–ò–ù–´ –°–û–û–ë–©–ï–ù–ò–Ø (256 –°–ò–ú–í–û–õ–û–í)");
        }
        
        addMessageToDOM(text, sender, files);
        saveMessageToStorage(text, sender, files);
        
    } catch (error) {
        console.error("–°–ò–°–¢–ï–ú–ù–ê–Ø –û–®–ò–ë–ö–ê:", error.message);
        showSystemAlert(`–û–®–ò–ë–ö–ê: ${error.message}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ DOM
function addMessageToDOM(text, sender, files = []) {
    const messageDiv = document.createElement('div');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const isPriority = text && (text.includes('–°–†–û–ß–ù–û') || text.includes('–í–ê–ñ–ù–û') || text.includes('–¢–†–ï–í–û–ì–ê'));
    messageDiv.className = isPriority ? 'message message-priority-high' : 'message';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è
    if (files && files.length > 0) {
        messageDiv.classList.add('message-has-attachments');
    }
    
    const now = new Date();
    const timeString = now.toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit',
        second: '2-digit'
    });
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
    const timeElement = document.createElement('div');
    timeElement.className = 'message-time';
    timeElement.textContent = `[${timeString}]`;

    const senderElement = document.createElement('div');
    senderElement.className = 'message-sender';
    senderElement.textContent = `${sender}:`;

    const textElement = document.createElement('div');
    textElement.className = 'message-text';
    textElement.textContent = text || ''; // textContent —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã

    messageDiv.appendChild(timeElement);
    messageDiv.appendChild(senderElement);
    messageDiv.appendChild(textElement);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (files && files.length > 0) {
        const filesElement = document.createElement('div');
        filesElement.className = 'message-files';
        
        files.forEach(file => {
            const fileElement = document.createElement('div');
            fileElement.className = 'message-file';
            
            const fileIcon = document.createElement('span');
            fileIcon.className = 'message-file-icon';
            fileIcon.textContent = getFileIcon(getFileCategory(file.type));
            
            const fileLink = document.createElement('span');
            fileLink.className = 'message-file-link';
            fileLink.textContent = file.name;
            fileLink.onclick = function() {
                downloadFile(file);
            };
            
            const fileSize = document.createElement('span');
            fileSize.className = 'message-file-size';
            fileSize.textContent = `(${formatFileSize(file.size)})`;
            
            fileElement.appendChild(fileIcon);
            fileElement.appendChild(fileLink);
            fileElement.appendChild(fileSize);
            filesElement.appendChild(fileElement);
        });
        
        messageDiv.appendChild(filesElement);
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    messageDiv.style.opacity = '0';
    messageDiv.style.transform = 'translateY(10px)';
    
    messagesContainer.appendChild(messageDiv);
    
    // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        messageDiv.style.transition = 'all 0.3s ease';
        messageDiv.style.opacity = '1';
        messageDiv.style.transform = 'translateY(0)';
    }, 100);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    limitVisibleMessages();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
function saveMessageToStorage(text, sender, files = []) {
    const savedMessages = localStorage.getItem('chatMessages_3826');
    let messages = [];
    
    if (savedMessages) {
        messages = JSON.parse(savedMessages);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
    const fileData = files.map(file => ({
        name: file.name,
        type: file.type,
        size: file.size,
        data: null // –ú—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–∏ —Ñ–∞–π–ª—ã –≤ localStorage –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞
    }));
    
    messages.push({
        text: text,
        sender: sender,
        timestamp: new Date().toISOString(),
        priority: text && (text.includes('–°–†–û–ß–ù–û') || text.includes('–í–ê–ñ–ù–û')),
        hasAttachments: files.length > 0,
        attachments: fileData
    });
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 100 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    if (messages.length > 100) {
        messages = messages.slice(-50);
    }
    
    localStorage.setItem('chatMessages_3826', JSON.stringify(messages));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
function downloadFile(file) {
    // –ï—Å–ª–∏ file —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è File –æ–±—ä–µ–∫—Ç–æ–º (–∏–∑ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
    if (file instanceof File) {
        const url = URL.createObjectURL(file);
        const a = document.createElement('a');
        a.href = url;
        a.download = file.name;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    } 
    // –ï—Å–ª–∏ file —ç—Ç–æ –æ–±—ä–µ–∫—Ç –∏–∑ –∞—Ä—Ö–∏–≤–∞ (—Å –ø–æ–ª–µ–º data)
    else if (file.data) {
        // –°–æ–∑–¥–∞–µ–º Blob –∏–∑ Data URL
        const byteString = atob(file.data.split(',')[1]);
        const mimeString = file.data.split(',')[0].split(':')[1].split(';')[0];
        const ab = new ArrayBuffer(byteString.length);
        const ia = new Uint8Array(ab);
        for (let i = 0; i < byteString.length; i++) {
            ia[i] = byteString.charCodeAt(i);
        }
        const blob = new Blob([ab], { type: mimeString });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = file.name;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
function getFileCategory(mimeType) {
    if (mimeType.startsWith('image/')) return 'image';
    if (mimeType.startsWith('audio/')) return 'audio';
    if (mimeType.startsWith('video/')) return 'video';
    if (mimeType.includes('pdf')) return 'document';
    if (mimeType.includes('word') || mimeType.includes('document')) return 'document';
    if (mimeType.includes('text')) return 'text';
    return 'other';
}

function getFileIcon(category) {
    const icons = {
        image: 'üñº',
        audio: 'üéµ',
        video: 'üé¨',
        document: 'üìÑ',
        text: 'üìù',
        other: 'üìÅ'
    };
    return icons[category] || 'üìÅ';
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 –ë';
    
    const k = 1024;
    const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
function loadMessagesFromStorage() {
    const savedMessages = localStorage.getItem('chatMessages_3826');
    if (savedMessages) {
        const messages = JSON.parse(savedMessages);
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é
        messagesContainer.innerHTML = '';
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –û–ü–ï–†–ê–¢–û–†–ê
        messages.forEach(function(message) {
            if (message.sender === '–û–ü–ï–†–ê–¢–û–†') {
                const date = new Date(message.timestamp);
                const timeString = date.toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit'
                });
                
                addMessageWithMetadata(message.text, message.sender, timeString, message.priority);
            }
        });
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        limitVisibleMessages();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
function addMessageWithMetadata(text, sender, timeString, isPriority = false) {
    const messageDiv = document.createElement('div');
    messageDiv.className = isPriority ? 'message message-priority-high' : 'message';
    
    const timeElement = document.createElement('div');
    timeElement.className = 'message-time';
    timeElement.textContent = `[${timeString}]`;
    
    const senderElement = document.createElement('div');
    senderElement.className = 'message-sender';
    senderElement.textContent = `${sender}:`;
    
    const textElement = document.createElement('div');
    textElement.className = 'message-text';
    textElement.textContent = text;
    
    messageDiv.appendChild(timeElement);
    messageDiv.appendChild(senderElement);
    messageDiv.appendChild(textElement);
    
    messagesContainer.appendChild(messageDiv);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
function showSystemAlert(message) {
    const alertDiv = document.createElement('div');
    alertDiv.className = 'system-message';
    alertDiv.style.background = 'rgba(255, 51, 51, 0.2)';
    alertDiv.style.borderLeftColor = 'var(--color-red)';
    
    const now = new Date();
    const timeString = now.toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit',
        second: '2-digit'
    });
    
    alertDiv.innerHTML = `
        <div class="message-time">[${timeString}]</div>
        <div class="message-text">
            <span class="system-prefix">–°–ò–°–¢–ï–ú–ê –ö–û–ù–¢–†–û–õ–Ø:</span> ${message}
        </div>
    `;
    
    messagesContainer.appendChild(alertDiv);
    scrollToBottom();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.style.transition = 'all 0.5s ease';
            alertDiv.style.opacity = '0';
            alertDiv.style.height = '0';
            alertDiv.style.margin = '0';
            alertDiv.style.padding = '0';
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.parentNode.removeChild(alertDiv);
                }
            }, 500);
        }
    }, 5000);
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞
function clearSystemLog() {
    if (confirm("–í–´ –£–í–ï–†–ï–ù–´, –ß–¢–û –•–û–¢–ò–¢–ï –û–ß–ò–°–¢–ò–¢–¨ –°–ò–°–¢–ï–ú–ù–´–ô –ñ–£–†–ù–ê–õ?")) {
        messagesContainer.innerHTML = '';
        localStorage.removeItem('chatMessages_3826');
        updateMessageCounter();
    }
}

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞
function exportSystemLog() {
    const messages = [];
    const messageElements = messagesContainer.querySelectorAll('.message, .system-message');
    
    messageElements.forEach(element => {
        const time = element.querySelector('.message-time').textContent;
        const sender = element.querySelector('.message-sender') ? 
                      element.querySelector('.message-sender').textContent : '–°–ò–°–¢–ï–ú–ê';
        const text = element.querySelector('.message-text').textContent;
        
        messages.push(`${time} ${sender} ${text}`);
    });
    
    const logContent = messages.join('\n');
    const blob = new Blob([logContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = `system_log_3826_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
}

// –§—É–Ω–∫—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∏–¥–∏–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
function limitVisibleMessages() {
    const allMessages = messagesContainer.querySelectorAll('.message');
    const maxVisibleMessages = 10; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    if (allMessages.length > maxVisibleMessages) {
        // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ maxVisibleMessages
        for (let i = 0; i < allMessages.length - maxVisibleMessages; i++) {
            allMessages[i].style.display = 'none';
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for (let i = allMessages.length - maxVisibleMessages; i < allMessages.length; i++) {
            allMessages[i].style.display = 'block';
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∫—Ä—ã—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        addHiddenMessagesIndicator(allMessages.length - maxVisibleMessages);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–∫—Ä—ã—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
function addHiddenMessagesIndicator(hiddenCount) {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    const oldIndicator = messagesContainer.querySelector('.hidden-messages-indicator');
    if (oldIndicator) {
        oldIndicator.remove();
    }
    
    if (hiddenCount > 0) {
        const indicator = document.createElement('div');
        indicator.className = 'hidden-messages-indicator';
        indicator.innerHTML = `
            <div class="system-message">
                <div class="message-time">[${new Date().toLocaleTimeString('ru-RU')}]</div>
                <div class="message-text">
                    <span class="system-prefix">–°–ò–°–¢–ï–ú–ê:</span> –°–∫—Ä—ã—Ç–æ ${hiddenCount} –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                </div>
            </div>
        `;
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        const firstMessage = messagesContainer.querySelector('.message');
        if (firstMessage) {
            messagesContainer.insertBefore(indicator, firstMessage);
        }
    }
}